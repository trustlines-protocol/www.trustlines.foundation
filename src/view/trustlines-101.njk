{% set pageId = "101" %}
{% extends "layout/_main.njk" %}

{% block content %}
  <section class="section">
    <div class="container">
      <div class="content">
        <div class="columns">
          <div class="column is-1"></div>
          <div class="column is-10">

            <h1>The Trustlines Protocol</h1>
            <p class="content-large">The Trustlines Protocol represents a set of rules, processes, and definitions forged into deployable code, which aims to enable the mapping of trust-based relationships on to trustless infrastructure, e.g. a blockchain.</p>

            <p class="content-large">More specifically, the Trustlines Protocol implementation will include the components used to calculate paths and store transactions:</p>

            <ul class="content-large">
              <li>The Trustlines Blockchain, which is a mPoS (minimal viable Proof of Stake) sidechain to ethereum and stores transactions</li>
              <li>The relay servers, which calculates the optimal paths and relay the transactions sent by applications they are connected to.</li>
              <li>The client library, a high-level API, which enables applications to interact with the smart contract system on the blockchain via the relay servers</li>
              <li>The smart contract system which include the currency networks and other smart contacts supporting currency network related transactions (e.g. identity contract(s))</li>
            </ul>

            <h2>1. Trustlines Blockchain</h2>

            <p>The Trustlines Blockchain is a single-purpose blockchain for applications that fall in line with the Trustlines mission of promoting financial and economic inclusion of all people through decentralized peer-to-peer network protocols that serve
              common accounting.</p>

            <p>The Trustlines Blockchain will support the Trustlines Network to provide a flexible mechanism to adapt to changes that need to be done to ensure scalability, cheap transaction costs and censorship resistance. The Trustlines Foundation, therefore,
              defined the following requirements for the Trustlines Blockchain:</p>

            <ul>
              <li>Should have the capacity for up to 10M Trustlines Transfers per day</li>
              <li>Transaction cost should ideally be &lt; &euro;0.01</li>
              <li>Must be censorship-resistant</li>
              <li>Must feature the EVM (<a href="https://en.wikipedia.org/wiki/Ethereum">Ethereum Virtual Machine</a>)</li>
            </ul>

            <p>The Trustlines Blockchain is based on
              <a href="https://wiki.parity.io/Aura">Parity's Aura consensus algorithm</a>, which was initially designed for Proof of Authority chains and comes with a client implementation (<a href="https://github.com/paritytech/parity-ethereum">Parity</a>).</p>

            <h3>Aura functional description</h3>
            <p>Aura uses a predefined set of known authorities that fill in as validators. These authorities are assigned time slots in a
              <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">round robin</a>
              fashion in which they can produce a block which increases the blockchain length. Blocks can be counted as finalized if more than 50% of validators build on top of them. This relies on an honest and online majority assumption as well as an
              asynchronous network.</p>

            <h3>mPoS (minimal viable Proof of Stake) implementation</h3>
            <p>Contrary to
              <a href="https://en.wikipedia.org/wiki/Proof-of-authority">PoA</a>
              (Proof of Authority) blockchains such as Parity’s Aura consensus implementation, in the planned mPoS system, validators are anonymous. Introducing anonymous validators, however, creates the need to ensure that no entity can easily acquire 51% of the
              voting power. Popular chains like Ethereum 2.0 can achieve this by making buying 51% of the voting power prohibitively expensive. A new, unknown, blockchain such as the Trustlines Blockchain cannot plan for this.</p>

            <p>Our mPoS implementation, therefore, replaces the known authorities with anonymous validators that are defined through a validator auction in which bids of winners will be converted to stakes of Ether on the Ethereum blockchain for nine months. The
              participants of the auction additionally need to be part of a whitelisted set of candidates. By adding minimal PoS (Proof of Stake) features (staking process of the validator depositing an amount of Ethereum - and slashing process of rendering the
              deposits permanently inaccessible if certain criteria are fulfilled), we create a consensus algorithm implementation which employs sufficient safety measures for the Trustlines Blockchain. This ensures a reduced risk of Trustlines validators acting
              hazardously by equivocating (signing 2 different blocks for the same time slot with their private key).</p>

            <h3>Hard-forking as an additional security option</h3>
            <p>Anonymous validators and PoS features can not ensure security from various attacks or other threats such as, but not limited to, inactive validators, reorganization of blocks if validators collude, withholding blocks temporarily, building empty
              blocks, censoring certain transactions or filling blocks with unusable information. Therefore, if needed, and as an additional defense mechanism, the Trustlines Blockchain is intended to hard-fork to address these security risks and threats.</p>

            <p>Hard-forks are a simple, yet powerful way to remove misbehaving validators or prevent other attack scenarios without the need to slash deposits of Trustlines Validators. Since we expect that there will be a well-aligned community, we assume that
              coordination efforts around this will be manageable and hard-forking should be able to be carried out fairly easy. Any distribution of agreed on updates resulting in hard-forks can occur via an update function and/or by providing a configuration file
              via the Trustlines Foundation
              <a href="https://github.com/trustlines-protocol">GitHub repo</a>
              that validators can then add directly into their configuration directory of their clients.</p>

            <h2>2. The smart contract system</h2>
            <p>The smart contract system is a collection of smart contracts deployed on the Trustlines Blockchain. Transfers within the Trustlines Network are executed by the smart contracts. All trustlines (i.e. credit lines and balances between users) are
              notarized on the Trustlines Blockchain. Furthermore, the smart contracts enforce the rules determining how trustlines can be created, used and updated.</p>

            <h3>Currency networks</h3>
            <p>The Trustlines currency networks are the foundation of the trustlines functionalities and are implemented on-chain. This contract type is the core smart contract that end users can interact with. The contract records all properties a currency
              network has (e.g. symbol, name of currency network and fee structure) and account information (e.g. users - blockchain addresses, balances and trustlines). Trustlines are modeled as “accounts” within the currency networks and keep a record of the
              credit lines two parties have agreed upon as well as their current balance.</p>

            <h3>Identity contracts</h3>
            <p>The identity contracts enable the feature that users do not have to pay for their transaction costs but can use the delegate service offered by a person to let that person pay for the transactions. This can be used by e.g. businesses that want to
              create specific business cases in which they pay for the transactions of their customers or third parties that want to encourage users to use the Trustlines Blockchain without them needing to deal with transaction costs.</p>

            <p>To do this, the user will sign a message providing information about the trustlines transfer to be executed. The delegate service will forward a transaction containing this message and signature to an identity contract deployed on the Trustlines
              Blockchain. By doing so, the delegate service pays for the blockchain specific fees. The identity contract can then verify the signature provided by the user and execute its trustlines transfer depicted in the message. We use identity contracts as
              specified in
              <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1077.md">EIP 1077</a>
              (or at least similar to the former) to implement delegates.</p>

            <h2>3. Relay servers</h2>
            <p>The relay servers are an optional bridge between client apps and the Trustlines Blockchain. They offer services that are not feasible to be implemented on-chain or within the client apps. They are a back-end service that implements main features
              to connect the users to the smart contract system:</p>

            <ol>
              <li>Forwarding user signed transactions from a mobile app to the Trustlines Blockchain</li>
              <li>Indexing and storing event information</li>
              <li>Sending relevant blockchain events (including push notifications) to the mobile app</li>
              <li>Discovering a path between a sender and a receiver in the graph of trustlines by using
                <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra's Algorithm</a>, considering the shortest path in a number of hops.</li>
            </ol>

            <p>Users do not need to trust relay servers with their accounts (private keys), as transactions are signed locally on their device and validated by the currency networks on the Trustlines Blockchain.</p>

            <h2>4. The client library</h2>

            <p>The clientlib is a Javascript library which makes it easy to build applications on top of the Trustlines Protocol since it encapsulates app client functionalities in a ready to use way. It provides a high-level API to enable applications to
              interact with the smart contract system on the Trustlines Blockchain via a relay server.</p>

            <h3 class="content-large">Useful terms and definitions from the Trustlines Protocol</h3>

            <h3>Trustline balance</h3>
            <p>The trustline balance accounts for what two parties to a trustline agreement owe each other. The party with a
              <em>negative</em>
              balance
              <em>issued</em>
              the IOU, whereas the party with the
              <em>positive</em>
              balance
              <em>received</em>
              the IOU.</p>

            <p>The amount of a user’s positive balance equals to a negative balance of the other party of an agreement and vice versa. A user cannot issue an IOU of a higher amount to the other party of the agreement than the nominal value of the given
              <em>credit line</em>
              given by that party except if the creditor reduces the
              <em>credit line</em>
              so that it is lower than the balance.</p>

            <h3>Credit line</h3>

            <p><img src="/img/screen-101-a.svg"></p>

            <p>An (informal) agreement between two trusting users (e.g. friends), which allows one user to draw on credit given by the other. A
              <em>credit line</em>
              exists in the context of a
              <em>currency network</em>
              and therefore implicitly states the currency in which the accounting is done.</p>

            <h3>Trustline</h3>

            <p><img src="/img/screen-101-ab.svg"></p>

            <p>A trustline can be defined as a bilateral credit/trust relationship between individual entities or people. It encompasses two
              <em>credit lines</em>
              (each party giving one to the other party) as well as a
              <em>balance</em>
              which indicates if and how much credit one party has drawn from the other.</p>

            <h3>Multi-hop transfer (rippling)</h3>

            <p>A
              <em>multi-hop</em>
              payment refers to the mechanism used when multiple users in a
              <em>currency network</em>
              cooperate (implicitly as part of the agreement with the network) to facilitate a transfer between users that have no direct
              <em>trustline</em>
              agreement. The path encompasses all involved users and their
              <em>trustlines</em>. The IOU transfer is exclusively between
              <em>sender</em>
              and
              <em>receiver</em>
              (who exchanged something of value to receive an IOU in one of their trustlines).</p>

            <p><img src="/img/screen-101-multi-hop.svg"></p>

            <p>When a
              <em>currency network</em>
              is pictured as a graph, a chosen path is the list of edges that connect the two parties during a transfer. Each edge can also be referred to as a hop and an "N hops" transfer would indicate that N edges (and N+1 participants) have been involved in a
              trustlines transfer. If the number of hops N is larger than 1, then N-1 participants helped to facilitate the trustlines transfer.</p>

            <p>As the balances along a path are all updated, we also say that the balance updates are
              <em>rippled</em>
              through the system.</p>
          </div>
        </div>

        <p>&nbsp;</p>
        <p>&nbsp;</p>

      </div>
    </div>
  </section>
{% endblock %}
